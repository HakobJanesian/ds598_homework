{
	"name": "AirPollution_Data_Flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "airpollutionsinl",
						"type": "DatasetReference"
					},
					"name": "BronzeAirPollution"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Air_Pollution_Silver_Parquet",
						"type": "DatasetReference"
					},
					"name": "SinkSilverAirPollution"
				}
			],
			"transformations": [
				{
					"name": "FlattenAndMapNestedFields"
				},
				{
					"name": "TimestampAndLocation"
				},
				{
					"name": "RemoveInvalidRows"
				},
				{
					"name": "DerivedColumns"
				},
				{
					"name": "RemoveUnnecessaryColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as double, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     partitionBy('hash', 1)) ~> BronzeAirPollution",
				"BronzeAirPollution foldDown(unroll(list),",
				"     mapColumn(",
				"          lon = coord.lon,",
				"          lat = coord.lat,",
				"          aqi = list.main.aqi,",
				"          co = list.components.co,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          so2 = list.components.so2,",
				"          pm2_5 = list.components.pm2_5,",
				"          pm10 = list.components.pm10,",
				"          nh3 = list.components.nh3,",
				"          timestamp = list.dt",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenAndMapNestedFields",
				"FlattenAndMapNestedFields derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null()))",
				",",
				"          location = 'Boston') ~> TimestampAndLocation",
				"TimestampAndLocation filter(!isNull(aqi) && !isNull(corrected_timestamp) && !isNull(co)",
				") ~> RemoveInvalidRows",
				"RemoveInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          lat = 42.3601,",
				"          lon = -71.0589,",
				"          id = toString(location) + \"_\" + toString(corrected_timestamp),",
				"          aqi = aqi,",
				"          co = round(co, 2),",
				"          no = round(no, 2),",
				"          no2 = round(no2, 2),",
				"          o3 = round(o3, 2),",
				"          so2 = round(so2, 2),",
				"          pm2_5 = round(pm2_5, 2),",
				"          pm10 = round(pm10, 2),",
				"          nh3 = round(nh3, 2)) ~> DerivedColumns",
				"DerivedColumns select(mapColumn(",
				"          lon,",
				"          lat,",
				"          aqi,",
				"          co,",
				"          no,",
				"          no2,",
				"          o3,",
				"          so2,",
				"          pm2_5,",
				"          pm10,",
				"          nh3,",
				"          location,",
				"          id,",
				"          date_time,",
				"          corrected_timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveUnnecessaryColumns",
				"RemoveUnnecessaryColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkSilverAirPollution"
			]
		}
	}
}